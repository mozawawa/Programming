Generators, iterators, and closures
-----------------------------------

Generators / Iterators

A Python generator is a piece of specialized code able to produce a series of values, and to control the iteration process.

for i in range(5):
print(i)

A generator returns a series of values, and in general, is (implicitly) invoked more than once.

The iterator protocol is a way in which an object should behave to conform to the rules imposed by the context of the for and in statements. An object conforming to the iterator protocol is called an iterator.

An iterator must provide two methods:

__iter__() which should return the object itself and which is invoked once (it's needed for Python to successfully start the iteration)
__next__() which is intended to return the next value (first, second, and so on) of the desired series â€“ it will be invoked by the for/in statements in order to pass through the next iteration; if there are no more values to provide, the method should raise the StopIteration exception.



The iterator protocol isn't particularly difficult to understand and use, but it is also indisputable that the protocol is rather inconvenient.

The main discomfort it brings is the need to save the state of the iteration between subsequent __iter__ invocations.



def fun(n):
    for i in range(n):
        return i


def fun(n):
      for i in range(n):
         yield i



The list() function can transform a series of subsequent generator invocations into a real list:


Lambda Function
---------------

Programmers use the lambda function to simplify the code, to make it clearer and easier to understand.

A lambda function is a function without a name (you can also call it an anonymous function). 

invocation as below 
lambda parameters: expression

two = lambda: 2
sqr = lambda x: x * x
pwr = lambda x, y: x ** y

for a in range(-2, 3):
    print(sqr(a), end=" ")
    print(pwr(a, two()))


We can replace the code 

def print_function(args, fun):
    for x in args:
        print('f(', x,')=', fun(x), sep='')


def poly(x):
    return 2 * x**2 - 4 * x + 2


print_function([x for x in range(-2, 3)], poly)


with 

def print_function(args, fun):
    for x in args:
        print('f(', x,')=', fun(x), sep='')
 
print_function([x for x in range(-2, 3)], lambda x: 2 * x**2 - 4 * x + 2)



Lambdas and the map() function

map(function, list)

takes two arguments:
1-a function;
2-a list.

The map() function applies the function passed by its first argument to all its second argument's elements, and returns an iterator delivering all subsequent function results.


Lambdas and the filter() function

it filters its second argument while being guided by directions flowing from the function specified as the first argument 


Closures
--------

closure is a technique which allows the storing of values in spite of the fact that the context in which they have been created does not exist anymore


