The os module - interacting with the operating system

The module called os, which lets you interact with the operating system using Python.

In addition to file and directory operations, the os module enables you to:

1-get information about the operating system;
2-manage processes;
3-operate on I/O streams using file descriptors.

The os module provides a function called uname, which returns an object containing the following attributes:

systemname — stores the name of the operating system;
nodename — stores the machine name on the network;
release — stores the operating system release;
version — stores the operating system version;
machine — stores the hardware identifier, e.g., x86_64.

Unfortunately, the uname function only works on some Unix systems. If you use Windows, you can use the uname function in the platform module, which returns a similar result.


The os module allows you to quickly distinguish the operating system using the name attribute, which supports one of the following names:

posix — you'll get this name if you use Unix;
nt — you'll get this name if you use Windows;
java — you'll get this name if your code is written in Jython.



The os module provides a function called mkdir, which, like the mkdir command in Unix and Windows, allows you to create a directory. The mkdir function requires a path that can be relative or absolute. Let's recall what both paths look like in practice:

my_first_directory — this is a relative path which will create the my_first_directory directory in the current working directory;
./my_first_directory — this is a relative path that explicitly points to the current working directory. It has the same effect as the path above;
../my_first_directory — this is a relative path that will create the my_first_directory directory in the parent directory of the current working directory;
/python/my_first_directory — this is the absolute path that will create the my_first_directory directory, which in turn is in the python directory in the root directory.


import os

os.mkdir("my_first_directory")
print(os.listdir())
    

In the above example, another function provided by the os module named listdir is used. The listdir function returns a list containing the names of the files and directories that are in the path passed as an argument.

The makedirs function enables recursive directory creation, which means that all directories in the path will be created. Let's look at the code in the editor and see how it is in practice.

import os

os.makedirs("my_first_directory/my_second_directory")
os.chdir("my_first_directory")
print(os.listdir())
    


To move between directories, you can use a function called chdir, which changes the current working directory to the specified path. As an argument, it takes any relative or absolute path. In our example, we pass the first directory name to it.

NOTE: The equivalent of the makedirs function on Unix systems is the mkdir command with the -p flag, while in Windows, simply the mkdir command with the path:

Unix-like systems:
mkdir -p my_first_directory/my_second_directory
Windows:
mkdir my_first_directory/my_second_directory


As you’ve probably guessed, the os module provides a function that returns information about the current working directory. It's called getcwd.



import os

os.makedirs("my_first_directory/my_second_directory")
os.chdir("my_first_directory")
print(os.getcwd())
os.chdir("my_second_directory")
print(os.getcwd())

=============== RESTART: C:/Users/mohan/OneDrive/Desktop/test.py ===============
C:\Users\mohan\OneDrive\Desktop\my_first_directory
C:\Users\mohan\OneDrive\Desktop\my_first_directory\my_second_directory



The os module also allows you to delete directories. It gives you the option of deleting a single directory or a directory with its subdirectories. To delete a single directory, you can use a function called rmdir, which takes the path as its argument.


To remove a directory and its subdirectories, you can use the removedirs function, which requires you to specify a path containing all directories that should be removed:




All functions presented in this part of the course can be replaced by a function called system, which executes a command passed to it as a string.
The system function is available in both Windows and Unix. Depending on the system, it returns a different result.

import os

returned_value = os.system("mkdir my_first_directory")
print(returned_value)

